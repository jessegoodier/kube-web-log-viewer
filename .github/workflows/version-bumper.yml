name: Version Bumper
on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
jobs:
  version-bump:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install and setup uv
        run: |
          python -m pip install uv --break-system-packages
          uv venv
          source .venv/bin/activate
          # Install both script requirements and dev dependencies
          uv pip install -r .github/scripts/requirements.txt
          uv pip install -e '.[dev]'
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      - name: Get new version
        id: new-version
        run: |
          new_version=$(uv run bump-my-version show --increment ${{ github.event.inputs.version_bump }} new_version)
          if [ -z "$new_version" ]; then
            echo "Failed to determine new version"
            exit 1
          fi
          echo "new_version=$new_version" >> "$GITHUB_OUTPUT"
          echo "new_version=$new_version"
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          INPUT_VERSION_BUMP: ${{ github.event.inputs.version_bump }}
      - name: Create version branch
        id: create-branch
        run: |
          BRANCH_NAME="v${{ steps.new-version.outputs.new_version }}"
          git checkout -b $BRANCH_NAME
          echo "branch_name=$BRANCH_NAME" >> "$GITHUB_OUTPUT"
      - name: Update version in all files
        run: |
          echo "Updating version with bump-my-version from current to ${{ steps.new-version.outputs.new_version }}"
          if ! uv run bump-my-version bump --new-version "${{ steps.new-version.outputs.new_version }}" ${{ github.event.inputs.version_bump }}; then
            echo "Failed to update version with bump-my-version"
            exit 1
          fi
      - name: Update Helm chart versions
        run: |
          # Update both version and appVersion in Chart.yaml
          if [ -f charts/logpilot/Chart.yaml ]; then
            sed -i.bak -e "s/^version:.*/version: ${{ steps.new-version.outputs.new_version }}/" \
                      -e "s/^appVersion:.*/appVersion: ${{ steps.new-version.outputs.new_version }}/" \
                      charts/logpilot/Chart.yaml
            rm -f charts/logpilot/Chart.yaml.bak
          else
            echo "Chart.yaml not found"
            exit 1
          fi
      - name: Sync source files to chart
        run: |
          # Ensure chart src directory exists
          mkdir -p charts/logpilot/src/

          # Copy source files to chart directory
          if ! cp -r src/* charts/logpilot/src/; then
            echo "Failed to copy source files to chart directory"
            exit 1
          fi

          # Copy pyproject.toml
          if ! cp pyproject.toml charts/logpilot/; then
            echo "Failed to copy pyproject.toml"
            exit 1
          fi

          # Verify files were copied
          if [ ! -d "charts/logpilot/src" ] || [ ! -f "charts/logpilot/pyproject.toml" ]; then
            echo "Failed to verify copied files"
            exit 1
          fi
      - name: Commit version changes
        run: |
          # Add all the version-updated files
          git add .
          # Commit the version changes
          git commit -m "Bump version to ${{ steps.new-version.outputs.new_version }}" \
            -m "Version bump: ${{ github.event.inputs.version_bump }}"

          # Push to version branch
          git push -f origin ${{ steps.create-branch.outputs.branch_name }}
          echo "âœ… Version changes committed to version branch"
      - name: Update Helm Bumper workflow with version branches
        run: |
          # adding the version branches to options in the helm-bumper.yml file
          if ! uv run python .github/scripts/update_helm_bumper.py; then
            echo "Failed to update helm bumper workflow"
            exit 1
          fi
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.PAT_TOKEN }}
          commit-message: "Bump version to ${{ steps.new-version.outputs.new_version }}"
          title: "Version Bump: ${{ steps.new-version.outputs.new_version }}"
          body: |
            ## Version Bump PR

            **Version Bump Type:** ${{ github.event.inputs.version_bump }}
            **Previous Version:** ${{ steps.new-version.outputs.current-version }}
            **New Version:** ${{ steps.new-version.outputs.new_version }}

            This PR was automatically created by the Version Bumper workflow.

            ### Changes
            - Updated Python package version
            - Updated Helm chart version and appVersion
            - Synchronized source files with chart directory
            - Updated Helm Bumper workflow with available version branches

            Please review the changes and merge if everything looks correct.

            After merging, the Helm Chart Bumper workflow will automatically run to update the Helm chart version.
          branch: ${{ steps.create-branch.outputs.branch_name }}
          base: main
          labels: "version-bump,automated-pr"
